# -*- coding: utf-8 -*-
"""concatenation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qgvlk4O8m8NxJ8o4rCyAtMLioyLs2GI9
"""

import pandas as pd
import os

pd.options.mode.chained_assignment = None  # default='warn'

df = pd.read_csv('./data/Sales_April_2019.csv')

files = [file for file in os.listdir('./data/')]


all_data = pd.DataFrame()


for file in files:
    df = pd.read_csv('./data/'+file)
    all_data = pd.concat([all_data, df])

all_data.to_csv('all_data.csv', index=False)

all_data = pd.read_csv('all_data.csv')

all_data

all_data_NaN = all_data[all_data.isna().any(axis=1)]

all_data = all_data.dropna(how='any')
all_data

all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']
all_data



all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')

all_data

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

"""# Best sales month"""

all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
all_data

results = all_data.groupby('Month').sum()
results

import matplotlib.pyplot as plt

months = [1,4,5,8,9,12]

plt.bar(months, results['Sales'])

plt.ylabel('Sales in USD ($)')
plt.xlabel('Month Number')
plt.show()

"""####Best sales city"""

###let's use apply def

def get_city(address):
    return address.split(',')[1]

def get_state(address):
    return address.split(',')[2].split(' ')[1]

all_data['City'] = all_data['Purchase Address'].apply(lambda a: f"{get_city(a)} ({get_state(a)})")
###(lambda a: get_city(a) + '(' + get_state(a) + ')')
all_data.head()

results_cities = all_data.groupby('City').sum()
results_cities

import matplotlib.pyplot as plt


cities = [city for city, df in all_data.groupby('City')]

plt.bar(cities, results_cities['Sales'])
plt.xticks(cities, rotation='vertical', size=8)
plt.xlabel('City Name')
plt.ylabel('Sales in USD ($)')
plt.show()

"""####very special, need more understading"""

cities = [city for city, df in all_data.groupby('City')]

print(cities)

all_data

all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])

all_data

all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
all_data

hours = [hour for hour, df in all_data.groupby(['Hour'])]
plt.plot(hours, all_data.groupby('Hour').count())

all_data.groupby('Hour').count()


plt.xticks(hours)
plt.grid()
plt.xlabel('Hour')
plt.ylabel('Number of Orders')
plt.show()

"""##what products are most often sold together?"""

df = all_data[all_data['Order ID'].duplicated(keep=False)]

df['Groups'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))

df = df[['Order ID', 'Groups']].drop_duplicates()

df

##https://stackoverflow.com/questions/52195887/counting-unique-pairs-of-numbers-into-a-python-dictionary

from itertools import combinations
from collections import Counter

count = Counter()

for row in df['Groups']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list,2)))

for key,value in count.most_common(10):
    print(key, value)

##what produts do you think sold most and why?

product_group = all_data.groupby('Product')

quantity_ordered = product_group.sum()['Quantity Ordered']
products = [product for product, df in product_group]

plt.bar(products, quantity_ordered)
plt.xticks(products, rotation='vertical', size=9)

plt.xlabel('Product')
plt.ylabel('Sale Number')
plt.show()

prices = all_data.groupby('Product').mean()['Price Each']

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()

ax1.bar(products, quantity_ordered)
ax2.plot(products, prices, color = 'g')

ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color = 'b')
ax2.set_ylabel('Price', color = 'g')

ax1.set_xticklabels(products, rotation = 'vertical', size = 8)

plt.show()

fig.savefig('sale_product.png')



